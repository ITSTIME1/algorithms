# 문제분석

# x 값이 나오고
# 음 뭐지


# 막대기는 뭘까


# 처음에 나한테 64cm 인 막대기가 있다
# 근데 난 이걸 23cm 로 만들고 싶다


# 이걸 반으로 꼐속 자르다보며 
# 64 32 16 8 4 2 1
# 이 된다
# 어짜피 막대기의 개수가 필요한거니까
# 내가 원하는게 23cm 이니
# 64 로는 만들 수 없기 때문에 반으로자른다 
# 32 로도 만들 수 없기 때문에 반으로자른다
# 16 으로는 부족해서 만들 수 없기 때문에
# 우선 23보다 작은 16을 리스트에 추가해준다
# [16]
# 그럼 23-16 = 7만큼 필요하다

# 그럼 다름 8은 크기 때문에 만들 수 없다
# 여기서 8-7 만큼 하면 가능하다고 생각할 ㅅ도 있는데
# 큰 거는 x 보다 큰거는 무조건 짧은걸 절반으로 자른다고 한다
# 이미 난 짜른걸 다 가지고 있으니까 4를 가지고 와서
# 7-4 = 3
# [16, 4]
# 그럼 필요한 막대기의 길이는 3cm 가 되었고
# 다음 자른걸 가지고 와서 x 보다 작다면
# [16, 4, 2, 1]
# 이렇게 추가해준다

# 그럼 남게 되는 막대기의 개수가 나오고
# 정확히 나오게 된다



x = int(input())

first = 64
arr = [first]
while True:
	if first == 1:
		break
	first //= 2
	arr.append(first)


total = []
for i in arr:
	if i <= x:
		total.append(i)
		x-=i
print(len(total))



# n = 16
# (logn)^2 = 16
# 루트n = 4 

# n 이 시간복잡도의 영향이 가지 않을 정도일 경우
# logn^2 이 더커지는 현상이 발생되기 때문에
# 5번은 항상 맞다고 할 수 없음

# 만약 n 이 기하급수적으로 커진다면
# 로그 n을 제곱한 수가 < 루트 n 보다 작기 때문임
# 즉 n의 값에 따라 다르기 때문에 항상 참일 수 없다라는 결론이 나오 할


# # 근데 이건 아닌거 같은데


# 4^20
# 40 ^ 2 = 1600
# 루트 n 이라고 한다면 1048576

