# 문제분석

# 첫번째 버튼 = 1 증가
# 두번째 버튼 = 1 감소
# 나머지 버튼은 즐겨찾기 기능, 미리 지정된 주파수로 이동한다.

# 현재 주파수 A
# 듣고 싶은 주파수 B

a, b = map(int, input().split())
n = int(input())

arr = [input() for _ in range(n)]


# 100 100 현재 주파수가 100 인데 가고 싶은 주파수가 100인경우는없다
# n개의 버튼은 즐겨찾기 기능이기 때문에
# n 개의 버튼이 주어졌다면 그 버튼들은 다 즐겨찾기 기능이다
100 -> 15로 갈려면

# 때문에 n개의 버튼이 하나 주어졌으니 -> 이버튼은 즐겨찾기 버튼인 것이다
# 때문에 즐겨찾기에 있는 미리 저장된 주파수로 이동하게 된다면
# 1번의 클릭만으로 이동이 가능하다.



88 17
3
18
1
42

# 88인데 현재 주파수가 17 주파수로 가고 싶다고한다

# 3개의 버튼이 주어졌는데
[18, 1, 42]
[]
라고 한다
그럼 최소의 횟수로 이동하고 싶은거니까
# 17과 가장 가까운 수로 이동하는게 가장 적은 방법으로 이동할 수 있따.
# 따라서 18채널로 이동한뒤 두번째 버튼만 누른다면 2번만의 이동할 수 있다.


64 120
1
567

64->120으로 가고 싶다
[567]
하나만 주어졌기 때문에
만약 567로 이동한다면 120 까지 567-120 번만큼 눌러야한다 그럼 총 440번 눌러야하는데
매우 비효율적이기 때문에 현재 채널에서 + 버튼을 눌러서 올라가는 방법을 생각해보자

120-64 번만큼만 누른다면 56번 만의 올라갈 수 있다.


# 여기서 찾은 사실들은
# 우선 n은 0이지 않다 즉 즐겨찾기 되어 있는 주파수는 1개이상으로 주어진다는 소리고
# 같은 채널로 이동하는 경우는 없다.

# 때문에 우리가 구현해야 하는건
# 현재 주파수에서 -> 원하는 주파수로 가는 방법만 정의하면된다.

# 이때 몇가지 경우로 나눌 수 있는데


# 첫번째 B가 원하는 주파수기 때문에 만약 즐겨찾기 기능에 원하는 주파수가 있다면
# 해당 주파수로 이동한다. 즉 한번만의 처리가 가능하다

# 두번째 B가 원하는 주파수인데 즐겨찾기 기능에 없다면 B와 가장 가까운 거리를 찾는다.

# 세번째 B가 원하는 주파수인데 즐겨찾기 기능에 없다면 B와 가장 가까운 거리를 찾는데 이때 n=1 일경우
# 즉 주파수가 하나일 경우 현재주파수에서 출발하는게 빠른지 아니면 이동해서 원하는 주파수로 가는게 빠른지 정한다.

# 그럼 n == 1 일때와 n != 1 아닐때로 구분 지을 수 있다.


	
# if n == 1

# 네가지 경우가 있네
# a < b
# n[0] > b
# 현재 주파수가 가고자 하는 주파수보다 작기때문에
# root_a = b-a = 56
# root_b = n[0]-b = 447
64 120
1
567

# a < b
# n[0] < b
# root_a = b-a = 56
# root_b = b-n[0] = 108
64 120
1
12

# a > b
# n[0] > b
# root_a = a-b = 56
# root_b = n[0]-b = 503
120 64
1
567

# a > b
# n[0] < b 
# root_a = b-a = 56
# root_b = b-n[0] = 54 
120 64
1
10


# if n!=1:

88 17
3
18
1
42

[1, 42]

16, 25
# 이 셋중 가장 작은 수를 빼준다면 18번으로 이동할 수 있고
# 여기서 또 다시 거리르 측정해야 된다면 아니다

# 왜냐하면 이미 거리를 측정함으로써 최대한 가장 가까운 위치로 이동했기 때문에
# 그 거리에서부터는 +,- 버튼으로만 조작하면된다.
# 위의 설명에서 증명될 수 있는데
# 내가 원하는건 bㄹ로 한번에 가는 방법이지만 그렇게 할 수 없기 때문에
# b와 가장 가까운 거리에 있는 주파수를 선택했다.
# 때문에 그 주파수로 이동하게 된다면 최소거리의 주파수는 사라지게 되는 것이다.
# 그럼 최소주파수 + 1 번째가 다시 최소주파수가 되지만 그 최소주파수는 이전의 있던 최소주파수보다 반드시 멀다

# 그렇기 때문에 여기서부터는 +,- 로 이동하게 끔 구현한다.
# 그럼 18번 채널로 이동했기 때문에 이동한 횟수 + 차이 만큼 더해준다면
# 답이 된다.

# 하지만 이런 경우가 있다.

# n != 1 이 아니더라도
# 즐겨찾기에 있는 주파수의 거리들보다
# 현재 주파수에서 가는 거리가 더 빠를 수 있다 가령


88 87
3
18
1
42
[18, 1, 42]# 라고 한다면
# 69, 86, 45
# 인데 현재 주파수에서 -1 만 한다면 1번만의 갈 수 있기 때문이다.
