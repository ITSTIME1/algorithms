# 문제분석

# 카드를 바닥에 내려놓고 있다 = 몇장인지는 모른다 4<=N<=10 장 사이다
# 각 카드에는 1이상 99 이하의 정수가 적혀져 있다


# 이 번호가 적힌 카드들 중에서 k(2~4)장을 선택하고

# 가로로 나란히 정수를 만든다 = 숫자를 나열한다

# N 장중에 K장을 선택해서 만들 수 있는 순열의 수

# N = 5장을 선택하고 1, 2, 3, 13, 21 이라고 한다면
# 여기서 K = 3장을 선택해서 숫자를 만들건데

# 2,1,13 이라면 1이 두번 쓰였기 때문에 중복순열이 되는데
# 중복을 허락해서 만드는 수니까
# 한 정수를만드는데 여러가지 수가 있을 수 있다
# 2, 1, 13 = 21, 1, 3 을 나열하면 결국 같은 정수가 나온다는거

# 12 21 은 조합에서 같은 순서를 고려하지 않고 뽑는게 조합인데
# 일단 중복해서 뽑았다기 보단
# 뽑았는데 그 수가 중복된거 일뿐..

# 순서를 고려하지 안흔ㄴ다 12 21 은 같은 것이기 때문에 순서를 따지지 않는다

# 순열은 순서가 중요해 1 을 뽑고 2를 뽑는건 순서에 영향이가
# 2 를뽑고 1을 뽑게 되면 순서가 뒤집어 졌기 때문에 다른 숫자로 보고 다른 경우의 수로 생각해

# 1을 재사용했다 라는건 중복을 의미하는 것이고
# 그럼 중복을 하용한 중복순열, 중복조합 중 하나인데
# 중복조합일 경우 12 21은 다시 뽑지 않아 12와 21은 같은 숫자를 뽑은것으로 간주하기 때문에
# 중복순열일 경우 12 21은 숫자는 같지만 다른 경우의 수로 보는것
# 그럼 한 정수를 만드는 조합이 여러가지 일 경우 그 경우의 수를 포함하냐?

# 4장의 카드 중에 2장을 선택해서 만드는 중북OO 
# 만약 중복순열일 경우 순서가 다른걸 포함할거고
# 중복 조합일 경우 순서가 다른걸 포함 하지 않을테니까
# 중복 순열일 경우 2, 1, 13 == 21, 1, 3 이 가능하다 \


# 설명이 더 있으면 좋겠는데 난 문제를 읽고 중복순열 혹은 중복조합인줄 알았는데
# 여러가지 조합이 있을 수 있다는 말만 써놓았으니
# 예제를 돌려보지 않으면 중복 조합이나 중복순열로 만들었을때
# 예제 개수가 안나온걸 확인할 수 있고
# 심지어 122 가 나올려면 순열로 나오게끔 만들어야 한다 12, 2 가 나와야 한다


# 결국에 같은 숫자가 나오는거는 배제 시켜야 한다라는 문구가 아무데도 없다고 생각하기 때문에
# 너무 애매하다..? 
import itertools

n  = int(input())
k = int(input())

num = [int(input()) for _ in range(n)]

to = set()
ze = []
for i in itertools.permutations(num, k):
	result = list(map(str, i))
	c = "".join(result)
	to.add(c)
	ze.append(c)

print(to)
print(ze)
print(len(to))
