# 해당 문제는
# 최소 비용을 구하는 문제이다
# 다시 말해 금액을 가장 적게 내는 방법을 찾는건데
# 우선 조건이 존재한다
# 3개씩 묶었을때 가장 작은 금액은 무료로 준다는 것
# 두번째는 3개씩 묶지 않았을때는 정가를 내야 한다는 것

# 그렇다면 3개씩 묶는게 할인도 많이해주고 최소비용을 만드는데 이득이라는걸 알 수 있다.
# 그렇다면 3개는 어떤 숫자로 이루어져야 하는가
# 각각의 비용들이 존재하니까
# 가장 큰 비용부터 가장 작은 비용까지 있을것이다.
# 3개씩 묶는다면 묶었을때 가장 작은 값은 무료로 주니까
# 역으로 생각해보면
# 3개씩 묶는 숫자들중에서 가장 작은 값이 무료라는 것
# 그렇다면 숫자가 큰거일수록 즉 비용이 큰 것 끼리 묶은 것일 수록
# "큰것 끼리 묶은 것 중에서 가장 작은 값"이 무료로 주어지게 된다.
# 즉 작은 값들로만 구성되어져서 할인률이 낮아지는 것보다
# 큰것 끼리 묶어서 큰 것 중에서 가장 작은 값만 포함하지 않으면 되니까
# 전체적으로 봤을때 할인을 더 많이해준다는 걸 알 수 있다.

# 따라서 큰 것 끼리 우선적으로 묶어주고
# 묶지 못할 수 있다
# 유제품의 길이가 3으로 나눠떨어진다면 모두가 다 3개로 묶이지만
# 3으로 나눠떨어지지 않는다면 3개로 전부 묶을 수없다.

# 그럼 우선적으로 리스트를 통해서
# 3개씩 묶어주고
# 3개씩 묶는것에 마지노선은 n // 3으로 나눈게 기준이되고
# 3으로 나눴을때 가장 작은 값들은 제외하고 cost에 더해준다
# 그리고 남은 값들에 대해서
# 연산을 진행해준다.
# 남은 값들은 정가를 지불한다.
import sys
input = sys.stdin.readline

n = int(input())
value = [int(input()) for _ in range(n)]

value.sort(reverse=True)

cost = 0
for i in range(0, len(value), 3):
	s = value[i:i+3]
	cost += sum(s) - min(s)

if len(value) % 3 != 0:
	s = value[len(value)-1]
	print(cost + s)
else:
	print(cost)



