# 게임 개발 시뮬레이션 문제

# N * M 직사각형으로 이루어져 있는 board 위에서 캐릭터를 움직이는 거고
# 캐릭터가 상하좌우로 움직일 수 있다는건 -> 시뮬레이션을 돌려라
# 바다로 되어 있는 공간은 갈 수 없다라고 정해주었고
# 캐릭터가 움직일려면 메뉴얼 대로 움직여야 된다고 한다

# 그럼 현재 위치가 주어지고 현재 바라보고 있는방향을 주어준다고 한다
# 이제 현재 방향을 기준으로 왼쪽 방향부터 차례대로 갈곳을 정한다
# 왼쪽 방향이라는건 북 서 남 동 순으로 돌게 된다는거고
# 만약 오른쪽 방향이라면 북 동 남 서 순으로 돌게 될것이다

# 왼쪽 방향 전체를 보는게 아니라
# 내가 바라보고 있는 왼쪽 방향에 바다는 못가니까
# 육지이면서 가보지 않은 곳이 있다면 왼쪽으로 한칸을 전진 하는거고
# 만약 왼쪽 방향에 가보지 않은 칸이 없다는건
# "육지인데 가본 칸만 있다는 것"

# 만약 4개의 방향 모두 가본 칸이거나 바다로 되어 있다면
# 바라보는 방향을 유지한채로 한 칸 뒤로가고

# 만약 뒤쪽으로 이동한 칸이 바다인 칸이라면 움직임을 멈춘다고 한다


# 시뮬레이션 문제 이네
N, M = map(int, input().split())

# N * M 크기의 직사각형이 주어지고
a, b, d = map(int, input().split())

# 0, 1이 주어지고
# 0 은 육지이고 1 은 바다라고 주어진다면

# 맵의 외각은 항상 바다로 되어 있다는건
# 전부다 육지이면 뒤로 갔을때 바다면 멈추는 조건에서 캐릭터가 멈추지 않기 
# 무조건 내가 이동할 곳 외각은 바다이어야 한다
board = [list(map(int, input().split())) for _ in range(N)]
blc = [[False for _ in range(M)] for _ in range(N)]

# 북 동 남 서
# cnt = 방문한 칸의 개수를 셀 변수
four, ro, cnt, z = [0, 1, 2, 3], 0, 1, 0 
# blc[a][b] 는 주어진 칸에서 시작하는거니까 그 칸도 방문한걸로 쳐야하기 때문에
# cnt += 1 올려주고
blc[a][b] = True
# 방향 결정 함수


# 현재 방향이 주어졌으니까
# 그 방향을 기준으로
# 북 동 남 서 = 방향벡터 횐전하는거에 맞춰서
# 그 회전하는 곳의 방향을 받고
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]
while True:
	# 왼쪽방향을 정해주고  북->서, 서 -> 남, 남 -> 동, 동->북
	# dirt를 바꾼다면
	# [3, 0, 1, 2]
	# [2, 3, 0, 1]
	d-=1
	c = four[d]
	
	nx = a + dx[real_four.index(four[0])]
	ny = b + dy[real_four.index(four[0])]
	# 만약 육지인데 갈 수 있는 곳이라면
	if board[nx][ny] == 0 and blc[nx][ny] != True:
		a, b = nx, ny
		cnt += 1
		z = 0
	else:
		z += 1
	if z == 4:
		nx = a - dx[real_four.index(four[0])]
		ny = b - dy[real_four.index(four[0])]
		if board[nx][ny] == 0:
 			a, b = nx, ny
 			z = 0
		else:
			break

print(cnt)



# 4 4
# 1 1 0 
# 1 1 1 1
# 1 0 0 1
# 1 1 0 1
# 1 1 1 1