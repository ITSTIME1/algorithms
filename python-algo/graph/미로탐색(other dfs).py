n, m = map(int, input().split())
graph = [list(map(int, input())) for _ in range(n)]
visited = [[0] * m for _ in range(n)]
visited[0][0] = 1

dx = [1,-1,0,0]
dy = [0,0,1,-1]
cnt = 0

def dfs(x,y):
    
    for i in range(4):
        nx, ny = x + dx[i], y + dy[i]
    
        if 0<=nx<n and 0<=ny<m and graph[nx][ny]==1:
        	# 다시 돌아와서 다시 갱신시키는코드네 ;
        	# 근데 이건 시간복잡도가 n*n 에 다가 또 돌아야하므로 너무 비효율적인 방법인데
            if visited[nx][ny] == 0 or visited[nx][ny] > visited[x][y] + 1:
                visited[nx][ny] = visited[x][y] + 1
                print(visited)
                if nx == n-1 and ny ==m-1:
                    return
                dfs(nx,ny)
    return

dfs(0,0)
print(visited[n-1][m-1])

# 이 코드가 콜스택을 이용한 재갱신 코드인데
# 마지막까지 한다면 17까지 찍게되고
# 콜스택이 하나씩 줄면서
# nxny > x, y + 1보다 즉 현재값의 +1 을 더한값보다 크다면 또 이동을 시킴
# 왜 이렇게 ㅐㅎㅆ는진 모르겠다... 그 값을 돌아온 현재값의 + 1값으로 갱신시켜버림
# 

[[1, 2, 0, 8, 9, 0], 
[2, 3, 0, 7, 8, 0], 
[3, 4, 5, 6, 7, 8], 
[4, 5, 6, 7, 0, 9]]

[[1, 8, 0, 12, 13, 0], 
[2, 7, 0, 11, 14, 0], 
[3, 6, 7, 10, 15, 16], 
[4, 5, 8, 9, 0, 17]]


[[1, 8, 0, 12, 13, 0], 
[2, 7, 0, 11, 12, 0],
3, 6, 7, 10, 15, 16],
 [4, 5, 8, 9, 0, 17]]

# 이런식으로 재갱신 시켜버리네
# 이렇게 다시 재갱신 시키는 이유가 뭘까
# increasing number 로 만드는거?
# 그럼 재갱신 될때 모든 노드가 시작점이 된다.

# 다익스트라 알고리즘이네
# 최단경로를 지속적으로 갱신해주는거

[[1, 8, 0, 12, 13, 0], 
[2, 7, 0, 11, 12, 0], 
[3, 6, 7, 10, 13, 16], 
[4, 5, 8, 9, 0, 17]]