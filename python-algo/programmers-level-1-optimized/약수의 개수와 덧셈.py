import sys
import heapq
from collections import deque
from itertools import permutations, combinations, product, combinations_with_replacement
input = sys.stdin.readline

# 약수문제를 푸는건데
# 제곱수의 성질을 이용하여 푸는 방법.

# 제곱수는 약수의 개수가 홀수개이다.
# 36을 예로들어본다면
# 1 * 36
# 2 * 18
# 3 * 12
# 4 * 9
# 6 * 6
# 1,2,3,4,6,9,12,18,36 = 총 9개
# 그 이유는 제곱수가 6 * 6 처럼 짝을 이루며 곱해지는게 아니라 같은 수가 두번 곱해지기 때문에
# 짝이 다른 수가 한개가 빈다 그렇기 때문에 무조건 홀수개가 나온다.

# 6 을 예로들어본다면
# 1 * 6
# 2 * 3
# 위 인수들을 제외하면 6을 만들 수 있는 인수들이 없기 때문에
# 6은 완전제곱수가 되지 않는다 따라서 1,2,3,6 인 약수의 개수가 4개가 되어 짝수개가된다.
# 위의 차이점은 완전제곱수가 되는가 안되는가의 차이가 생기고

# 그래서 left-right까지 제곱근을 판별해 i의 제곱근이 정수인지 확인한뒤
# 제곱근이 정수표현이 가능한 수는 약수의 개수가 홀수개.
# 3같은 경우는 제곱근이 1.7xxx으로 되어 사실상 소수부때문에 정수표현이 되지 않는다.
# 25의 제곱근 5.0 이런식으로 int형으로 표현될 수 있는 것과 달리
# 그럼 이 제곱근이 정수로 표현이 가능하다는 얘기는 완전제곱수로 표현이 가능하다는건데
# 위에서 완전제곱수의 약수의 개수는 홀수개라는걸 알고 있기 때문에
# 이런식으로도 풀이가 가능하다.


# 그럼 10같은건 어떻게 판단하는가
# 10의 제곱근은 루트10인데 루트10은 3.16x...
# 하지만 10의 약수의 개수는 1,2,5,10으로 4개다
# 그래서 int로 표현한지 체크해서 정수부분으로 표현이 안되기 때문에
# 더해준다.
# 16같은경우 홀수개라는걸 알 수 있기 때문에 빼준다.
for i in range(left, right+1):
	if int(i**0.5) == i**0.5:
		answer -=i
	else:
		answer += i