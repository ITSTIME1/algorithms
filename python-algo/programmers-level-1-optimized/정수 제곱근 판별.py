import sys
import heapq
from collections import deque
from itertools import permutations, combinations, product, combinations_with_replacement
input = sys.stdin.readline

# 이 문제의 핵심은
# 정수 제곱근이 되냐 안되냐를 판단하는 문제이다
# 우선 제곱근이라는게 어떠한 수를 두번 곱해서 = n의 수가 만들어지는 수를 제곱근이라고 한다
# 양의 제곱근, 음의 제곱근이 있는데
# 문제에선 양의 제곱근이라면 그 제곱근 + 1 의 제곱을 리턴하고, 만약 그렇지 않다면(소수 제곱근) -1 을 리턴하라는 소리다.


# 그럼 예시에서 주어진 n의 값이 121 인걸 보았을때 11의 제곱인걸 확인할 수 있다.
# 그럼 여기서 11은 121의 제곱근이 되므로 -11, +11 이 두개의 제곱근이 생긴다.
# 제곱근은 a > 0 클때 양의 제곱근, 음의 제곱근 2개가 생기고 절대값이 같고 부호가 다른 2개가 생긴다.
# 만약 a == 0 이라면 제곱해서 0이되는 수는 그냥 0밖에 없으므로 그냥 0 1개이다.
# 만약 a < 0 음수라면 어떤 수를 제곱하면 양수거나 0이되기 때문에 음수가 될 수는 없다.


# 정수의 체계를 본다면
# 양의정수, 0, 음의 정수가 있다 이게 정수로써의 기능을 하는 수의 체계이고 양의 정수 x의 제곱이 아니면 모두 -1 이니 0 or 음의 정수 or 소수가 존재한다.

# 제곱해서 0이 되는 수는 0뿐	따라서 0의 제곱근은 그냥 0

# 그래서 제곱근의 의미를 정확히 알아야 한다.

# 그럼 예제를 정확히 파악해보자.
# n = 121 이 주어졌다면 문제에서 구하고자 하는건 이게 양의 정수 x의 제곱이라면 양의 정수라고 한다면 1,2,3,... 이런 자연수의 제곱이라고 한다면
# 그 제곱근은 양수라는거기 때문에 121의 제곱근은 11*11 즉 11,-11이 나온다는걸 알 수 있고 11의 제곱이 121이 되기 때문에 121은 True가 리턴이 된다.

# 하지만 3 같은 경우는 어떤 수를 제곱해서 3이 되는 수가 있나? 근데 그게 정수범위의 수냐는 것이다. 즉 루트 3이라는건데 루트3을 제곱하면 3 -루트3을 제곱하면 3
# 루트3이 정수인가를 따져봐야 한다는것이다.
# 루트3 = 1.7xx.. 로 간다 즉 정수 범위가 아니라는 뜻이다.
# 즉 정수 범위가 아니기 때문에 False를 리턴하게 되는것이다.
# 만약 n = 25라고 한다면 n의 제곱근은 루트를 씌워 플러스5, 마이너스 5 두개가 생기는걸 볼 수 있다.
# 그럼 5의제곱이 = 25니까 양의정수x의 제곱이라는 내용의 성립 되므로 25는 True
# 25 의 제곱근 = ±5.000

# 그럼 이렇게 풀어볼 수 있을 것 같다.
import math

# n = 121

# 1.
# sqrt = n ** (1/2) # 따라서 이 제곱근은 +5, -5 두개가 나온다.

# if sqrt % 1 == 0:
# 	s = (sqrt+1)**2
# 	print(s)
# else:
# 	print(-1)


# 2.
# 또다른 방법으로는 0.5를 제곱하는거 이것또한 같은 방법이다.
# sqrt2 = n**(0.5)
# print(sqrt2)


# 3.
# 라이브러리를 사용하는 방법.

# math라이브러리의 제곱근 함수인 sqrt()
# 매개변수로 n을 넣게 되면 n의 제곱근을 구 할 수 있고
# is_integer() 함수를 통해서 그 값이 양의 정수값인지 아닌지 알 수 있다.
# isdigit() => 숫자를 판별하는 함수
# is_integer() => 정수값인지 확인.
n = 25
sqrt3 = math.sqrt(n).is_integer()
# 그럼 n은 5가 되니 양의 정수의 제곱이 된다라는 조건의 성립하므로
# math.pow()함수를사용해서 sqr3+1, 2승을 반환하면
d = math.pow(math.sqrt(n)+1, 2)
print(d)




