package programmers;

/**
 * PccAnalogWatch
 */
public class PccAnalogWatch {

    public static void main(String[] args) {
        Solution s = new Solution();
        s.solution(0, 0, 0, 0, 0, 0);
    }   
    


}

class Solution {
    public int solution(int h1, int m1, int s1, int h2, int m2, int s2) {
        int answer = -1;
        // 이건 고려해야할 사항이 좀 있는데
        // 각도를 이용해서 초단위로 겹치는 확인하는 것이다.
        // 즉 i초와 i + 1 초사이에서 겹치는지를 확인하는것이다.

        // 초침이 시/분 침과 겹치는 부분을 확인 하는것 이므로
        // 모두 360도 돈다는 것을 활용한다면, 초침이 시침이랑 만나게 되는 것과
        // 초침이 분침이랑 만나는 시점이 어떻게 만나게 되는지를 생각해보면 된다.

        // 각도를 가지고 계산하는 이유는 초단위로 계산하게 된다면 소수점 단위인 1초 미만의 단위를 계산할 수 없다.
        // 즉 1초씩 증가해서 계산하게 되면, 0.541초 등과 같은 소수점 단위에서 겹치는 부분을 알 수 없게 된다.
        // 그러므로 1초미만을 정밀하게 측정하기 위해서, 각도를 가지고 계산한다.
        // 각도를 가지고 계산한다는 것은 시 분 초 에 대한 것을 각도로 계산한다는 말이 되고, 시, 분, 초침의 각도를 각각 계산한다는 말이 된다.
        // 그러면 시침의 각도와 분침의 각도 초침의 각도를 각각 구한다는 얘기가 된다.
        // 그랬을때 우리가 구하고자 하는 것은 초침과 시침, 분침의 겹치는지를 판단하는것 이기 때문에
        // 시침은 정확히 시침의 각도(시분침) 그리고 분침의각도 초침의 각도를 각각 가지고 있기 때문에

        // 각도가 겹치거나 만약 초침이 분침 또는 시침보다 커지게 되는 시점이 된다면, 겹치는 것이라고 판단해볼 수 있다.
        // 초침이 가장 빨리 움직이게 된다 왜냐하면, 초침 같은 경우는 60초에 한바퀴를 돈다 12시 정각을 기준으로
        // 그러면 60초에 한바퀴를 도는 초침과, 60분에 한바퀴를 돌게 되는 분침 사이에는 당연히 초침이 더 빨리 돌 수 밖에 없다.

        // 즉 60s = 1바퀴 = 360도 = 6도 즉 초침은 초당 6도씩 돈다는 얘기고
        // 60분 = 1바퀴 = 360도 = 분당 = 6도 분침은 초당 0.1도씩 돈다. 그럼 도는 각도가 더 큰게 초침이기 때문에 더 크게 크게 돈다고 볼 수 있다.
        // 마찬가지로 시침은 12시간에 한바퀴를 돌기 때문에, 12시간= 1바퀴 = 360도 = 1시간당  =30도  그러면 분당 0.5도 초당 / 1/120도 정도 돈다.
        // 즉 시침 < 분침 < 초침 순으로 빨리 돈다는 것을 알 수 있다.
        // 이러한 사실에 입각해서, 초침의 속도가 가장 빠르므로, 초침의 각도가 분침의 각도와 같아지거나 커지게 된다면
        // 분침의 각도를 넘어 간 것이므로, 겹쳤다고 판단할 수 있다.

        // 그러기 위해서는 전제조건은 기존에는 초침의 각도가 분침의 각도보다 작아야하고, 1초가 지난 시점에서는 초침의 각도가 분침의 각도보다 커진다는 조건을 만족해야 한다.
        // 마찬가지로 시침 또한 초침과 비교했을때, 시침전에 있고, 1초가 지난 시점에서 시침을 넘어서거나 같다면, 이 역시 시침과 초침이 겹쳤다는 것을 알 수 있다.

        // 왜 이전 1초 전의 시간이 초침이 항상 전에 있어야 할지를 생각해보면, 이 조건이 없이 저 조건만 만족하게 된다면, 초침이 분침 또는 시침보다 항상 큰 시간대에 있다면 항상 참이 되므로
        // 통과하는 조건을 설정해주기 위함이라고 볼 수 있다.
        // 즉 시침과 분침이 어디에 있든 간에, 왼쪽->오른쪽으로 시계방향이 움직이는 것을 생각해보면, 
        // 초침이 시침과 분침의 왼쪽에서 -> 오른쪽을 시쳐 지나가면서, 겹치게 된다.

        // 그러므로, 통과조건을 잘 설정해주어야 하낟.

        // 그리고 고려해 주어야 하는 상황이 몇가지 있는데, 시작시간이 0시0분0초에서 시작하거나, 12시0분0초에서 시작한다면
        // 즉 시작시간이 위와 같다면, 시, 분, 초침이 모두 한자리에서 시작하는 것 이기 때문에
        // 문제에서 요구하는 것 처럼 한번만 겹치는 것으로 설정한다. 따라서 한번 카운트 하고 시작해야 된다는 의미가 된다.
        

        return answer;
    }
}